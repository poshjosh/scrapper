#Fri Jun 18 16:32:55 WAT 2010
################################################################################
# \\\\ in a properties file will appear as \\
# This is very important when using regex etc
################################################################################

# @required. List of all possible table names for this site.
# The first table name is used as default
tables=

crawlLimit=5000

scrappLimit=1000

# Minimum amount of data required for an extract/search result from a page to be accepted
minDataToAccept=2

uploadURL=http\://www.looseboxes.com/gx?rh\=tempadmin

defaultTitle=looseBoxes.com - find or upload jobs, gadgets, property, automobiles etc - all free!

#lineSeparator=

partSeparator=<BR itemtype="extractorProperty" propertyname="partSeparator"/>

maxBreaktagsBetween=2

# If true non-breaking spaces are replaced with ordinary spaces in extracted data
################################################################################
#
replaceNonBreakingSpace=false
#
# xxxNode{n}.replaceNonBreakingSpace=

# NODES
#
# xxxNode may be parentNode or targetNode, 
#
# Either parentNode or targetNode may have one or more startAt or stopAt nodes
#
# There may only be one parentNode. However targetNode, startAtNode and stopAtNode 
# may have multiple values thus each value MUST END IN A NUMBER. The general
# format is xxxNode{n}, where n is any number from 0 to propery 'maxFiltersPerKey'.
#
# targetNode{n} may have a targetNode{n}Value node. In this case the contents
# the targetNode{n} is used as the column while the contents of the
# targetNode{n}Value node is used as column value.
#
# parentNode may only have the following properies:
# attributes, attributesRegex, startAtNode, stopAtNode, columns
#
# startAtNode and stopAtNode may only have the following properties:
# attrbutes, attributesRegex
#
# ??? If a specific value is avialble then the global value is not used ???
################################################################################

#parentNode=

# If true subsequent extracts will be appended to previous extract for this node
# If specified, overrides the 'append' property which is applicable to all nodes
# For a xxxNode-xxxNodeValue pair the append value for xxxNodeValue is used
################################################################################

append=false

# xxxNode{n}.append=

# List of ,,, separated nodes whose attributes will be retained 
# The values specified for specific tags are APPENDED to those globally specified
################################################################################

nodesToRetainAttributes=!DOCTYPE,,,HTML,,,A

# xxxNode{n}.nodesToRetainAttributes=

# List of ,,, separated nodes names which will be accepted / rejected 
# as property name implies. For nodeTypes possible values are:
# 'tag', 'text', 'remark'
################################################################################

nodesToAccept=A,,,APPLET,,,BASE,,,BODY,,,COL,,,COLGROUP,,,UL,,,OL,,,LI,,,DL,,,DD,,,DT,,,DIV,,,FIELDSET,,,FORM,,,FONT,,,FRAMESET,,,FRAME,,,HEAD,,,H1,,,H2,,,H3,,,H4,,,H5,,,H6,,,HTML,,,INS,,,IMG,,,ISINDEX,,,KBD,,,LABEL,,,MAP,,,OBJECT,,,P,,,SPAN,,,STRONG,,,TBODY,,,TFOOT,,,TD,,,TH,,,THEAD,,,TR,,,TABLE,,,TEXTAREA,,,TITLE

# xxxNode{n}.nodesToAccept=

nodeTypesToAccept=text

# xxxNode{n}.nodeTypesToAccept=

parentNode.nodeTypesToAccept=tag,,,text

# nodesToReject=

# xxxNode{n}.nodesToReject=

# nodeTypesToReject=

# xxxNode{n}.nodeTypesToRject

# ,,, separated list
# Any TextNode that contains textToReject will not be accepted
################################################################################
#
# textToReject=
#
# xxxNode{n}.textToReject=

# ,,, separated list
# If this text is found in any node, then extraction will be stopped 
# for the current page
################################################################################
#
# textToDisableOn=
#
# xxxNode{n}.textToDisableOn=

# Any Node attribute not specified here is removed
# This applies only to nodes for which the property 'nodesToRetainAttributes'
# is 'true'. For node IMG e.g attributesToAccept=src,,,title
################################################################################
#
# atrributesToAccept
#
# xxxNode{n}.attributesToAccept

# Each xxxNode may have not more than this amount of nodes specified
# E.g xxxNode1, xxxNode2 ... xxxNode{n} where n = maxFiltersPerKey - 1
################################################################################

maxFiltersPerKey=20

# The ,,, separated list of attributes e.g abc=def,,,ghi=jkl
# When using xxxNode.attributes, ALL the attributes of the node MUST be specified
################################################################################

#xxxNode{n}.attributes= 

#xxxNode{n}.attributesRegex=

# The ,,, seperated list of colum names for which this node's content match 
# With the exception of key/value pair extractors, all other extractors
# must have this property specified, otherwise nothing will be extracted
################################################################################

# xxxNode{n}.columns = 

# Only start tags are counted. 
# <div>text_0<br/>text_1<br/><span></span>text_2</div>
# 
# <DIV> is at offset 0, the first <BR/> is at offset 1, 
# the second <BR/> is at offset 2  and <SPAN> is at offset 3
################################################################################
#
# targetNode{n}.offset=

# targetNode{n}.length=

# Represents the sequence of tags which should be extracted within this node
# Only start tags are counted.
# NOTE: ONLY APPLICABLE IF PARENT NODE IS NOT SPECIFIED
################################################################################
# DIV,,,SPAN = span in a div
# DIV SPAN = span after a div
#
# <div><br/>1. <span id="span0">text_0</span><br/>2. <span id="span1">text_1</span></div><br/>
#
# targetNode0.transverse=DIV,,,SPAN      = The first SPAN
# targetNode0.transverse=DIV,,,SPAN SPAN = The second SPAN
# targetNode0.transverse=DIV BR          = The BR after the DIV (the last BR)
#
# NOTE Regexes may be used thus
# @related_keywords @related_@regex
# Regexes are enclosed in ${@regex:(XXX)}. Where the XXX is the actual 
# regex ligeral. Scripting elements are removed such that:<br/>
# <span class="product-${@regex(.+?)}" becomes <span class="product-.+?"
################################################################################
#
# targetNode{n}.transverse=

# List of ,,, separated Class names for classes which must extend 
# com.bc.manager.Formatter. An object of each class will be instantiated 
# and used to format the data extracted from this node
################################################################################
#
# formatter=
#
# targetNode{n}.formatter=

# List of ,,, separated Class names for classes which must extend 
# com.bc.manager.Filter. An object of each class will be instantiated 
# and used to determine what node/data will be extracted
################################################################################

# targetNode{n}.filter=

# URL FILTER PROPERTIES
#
# URLs are first captured and then scrapped. For a URL to be scrapped, it must 
# first be captured. This means that if a URL is to be scrapped, it must be 
# accepted by both the capture and scrapp Filters. 
# Each URL captured could spin off multiple other URLs to be captured.
################################################################################

# ,,, separated list. 
# If any of these is present then the url will not be accepted by the
# filter concerned. Case insensitive. 
################################################################################

# captureUrlFilter_unwanted
# scrappUrlFilter_unwanted

# A single regex if found the url will not be accepted by the filter concerned
################################################################################

# captureUrlFilter_unwantedRegex
# scrappUrlFilter_unwantedRegex

# ,,, separated list. 
# If any of these is present then the url will be accepted by the
# filter concerned. Case insensitive. 
################################################################################

# captureUrlFilter_required
# scrappUrlFilter_required

# A single regex if found the url will be accepted by the filter concerned
################################################################################

# captureUrlFilter_requiredRegex
# scrappUrlFilter_requiredRegex

# Mappings
################################################################################
# Format:
# ${id}.mappings.xxx  
# ${id}.mappings.xxx.append   
# id may be targetNode${n}, url, page (n may be 0,1,2...)
# xxx may be any column in the database or simply the literal value 'table'
#
# Examples:
# url.mappings.type=/land/=8,,,/commercial/=2
# (if text '/land/' is found in the url then type will be set to '1'... etc)
#
# targetNode2.mappings.offerType=/for-sale/=1,,,/to-let/=2
# (if text '/for-sale/' is found in the url then offerType will be set to '1'... etc) 
#
# page.mappings.table=car=autos,,,ipad=gadgets
# (If text 'car' is found in the page then the table will be set to autos... etc)
# 
# page.mappings.table.replace=
# (If true, subsequent values will replace previous values. DEFAULT value is true) 
#
# 
################################################################################

###############################  KNOWN NODES  ##################################
#
#   abbr,address,area,article,aside,audio,b,base,bdo,
#   blockquote,button,canvas,cite,quote,command,datalist,del,details,
#   dfn,div,em,embed,fieldset,figurecaption,figure,footer,form,header,
#   hgroup,hkern,i,iframe,ins,kbd,keygen,label,legend,link,map,mark,menu,
#   meta,meter,nav,noscript,object,optgroup,output,param,progress,q,
#   rp,rt,ruby,samp,scalarproduct,selection,select,small,source,strong,
#   style,sub,summary,sup,table,th,time,title,track,variable,video,wbr
#   tbody,tfoot,thead
#   
#   !--,%,%=,%@,?    
#
################################################################################


# Input:  <div id="data">text_0<br/>text_1<span>text_2</span>text_3</div>text_4<div id="advert">...
# Output: text_0 text_1 text_2 text_3 text_4
# targetNode0.startAtNode0=DIV
# targetNode0.startAtNode0.attributes=id=data
# targetNode0.nodeTypesToAccept=text
# targetNode0.stopAtNode0=DIV
# targetNode0.stopAtNode0.attributes=id=advert

# Input:  <div id="data">text_0<br/>text_1<span>text_2</span>text_3</div>text_4<div id="advert">...
# Output: text_0 text_1 text_2 text_3
# targetNode0=DIV
# targetNode0.attributes=id=data
# targetNode0.nodeTypesToAccept=text

# Input:  <div id="data">text_0<br/>text_1<span>text_2</span>text_3</div>text_4<div id="advert">...
# Output: text_0 text_1 
# targetNode0.startAtNode0=DIV
# targetNode0.startAtNode0.attributes=id=data
# targetNode0.nodeTypesToAccept=text
# targetNode0.stopAtNode0=SPAN

# Input:  <div id="data">text_0<br/>text_1<span>text_2</span>text_3</div>text_4<div id="advert">...
# Output: text_1 
# targetNode0.startAtNode0=BR
# targetNode0.nodeTypesToAccept=text
# targetNode0.stopAtNode0=SPAN













